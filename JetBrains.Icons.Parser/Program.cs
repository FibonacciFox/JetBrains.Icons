using System.Drawing;
using System.Globalization;
using System.Xml.Linq;

namespace JetBrains.Icons.Parser
{
    public class SvgIcon
    {
        public string PathData { get; set; }
        public string FillColor { get; set; }
        public double? Opacity { get; set; }
        public Point? Transform { get; set; }
    }

    public partial class JetBrainsIconDataProvider
    {
        public List<SvgIcon> ParseSvg(string filePath)
        {
            var icons = new List<SvgIcon>();
            try
            {
                var doc = XDocument.Load(filePath);
                var paths = doc.Descendants().Where(e => e.Name.LocalName == "path" || e.Name.LocalName == "polygon");

                foreach (var path in paths)
                {
                    var d = path.Attribute("d")?.Value ?? path.Attribute("points")?.Value;
                    var fill = path.Attribute("fill")?.Value;
                    var opacity = path.Attribute("fill-opacity") != null ?
                        (double?)double.Parse(path.Attribute("fill-opacity").Value, CultureInfo.InvariantCulture) : null;
                    var transform = path.Attribute("transform")?.Value;

                    Point? point = null;
                    if (transform != null && transform.StartsWith("translate"))
                    {
                        try
                        {
                            var coordsPart = transform.Split(new[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries);
                            if (coordsPart.Length > 1)
                            {
                                var coords = coordsPart[1].Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries)
                                    .Select(coord => double.Parse(coord, CultureInfo.InvariantCulture))
                                    .ToArray();
                                if (coords.Length == 2)
                                {
                                    point = new Point((int)coords[0], (int)coords[1]);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error parsing transform attribute in file {filePath}: {ex.Message}");
                        }
                    }

                    icons.Add(new SvgIcon
                    {
                        PathData = d,
                        FillColor = fill,
                        Opacity = opacity,
                        Transform = point
                    });
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file {filePath}: {ex.Message}");
            }

            return icons;
        }

        public void GenerateCode(string outputPath, Dictionary<string, List<SvgIcon>> iconsData)
        {
            using (var writer = new StreamWriter(outputPath))
            {
                writer.WriteLine("// This code is generated automatically by JetBrains.IconDataProvider");
                writer.WriteLine("// Do not edit this file manually");
                writer.WriteLine();
                writer.WriteLine("using System.Collections.Generic;");
                writer.WriteLine("using System.Drawing;");
                writer.WriteLine("using System.Runtime.CompilerServices;");
                writer.WriteLine();
                writer.WriteLine("namespace JetBrains.Icons");
                writer.WriteLine("{");
                writer.WriteLine("    public partial class JetBrainsIconDataProvider");
                writer.WriteLine("    {");
                writer.WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");
                writer.WriteLine("        public virtual partial List<JetBrainsIconData> ProvideData(JetBrainsIconKind kind)");
                writer.WriteLine("        {");
                writer.WriteLine("            return kind switch");
                writer.WriteLine("            {");

                foreach (var iconData in iconsData)
                {
                    writer.WriteLine($"                JetBrainsIconKind.{iconData.Key} => new List<JetBrainsIconData>");
                    writer.WriteLine("                {");
                    foreach (var icon in iconData.Value)
                    {
                        writer.WriteLine("                    new JetBrainsIconData(");
                        writer.WriteLine($"                        \"{icon.PathData}\",");
                        writer.WriteLine($"                        \"{icon.FillColor}\"");

                        if (icon.Opacity.HasValue || icon.Transform.HasValue)
                        {
                            writer.Write(", ");
                            if (icon.Opacity.HasValue)
                            {
                                writer.WriteLine($"{icon.Opacity.Value.ToString(CultureInfo.InvariantCulture)}");
                            }
                            else
                            {
                                writer.WriteLine("null");
                            }

                            if (icon.Transform.HasValue)
                            {
                                writer.WriteLine($", new Point({icon.Transform.Value.X}, {icon.Transform.Value.Y})");
                            }
                        }
                        writer.WriteLine("                    ),");
                    }
                    writer.WriteLine("                },");
                }

                writer.WriteLine("                _ => new List<JetBrainsIconData>()");
                writer.WriteLine("            };");
                writer.WriteLine("        }");
                writer.WriteLine("    }");
                writer.WriteLine("}");
            }
        }

        public void ProcessSvgFiles(string directoryPath, string outputPath)
        {
            var svgFiles = Directory.GetFiles(directoryPath, "*.svg");
            var iconsData = new Dictionary<string, List<SvgIcon>>();

            foreach (var svgFile in svgFiles)
            {
                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(svgFile);
                var icons = ParseSvg(svgFile);
                if (icons.Count > 0)
                {
                    iconsData[fileNameWithoutExtension] = icons;
                }
                else
                {
                    Console.WriteLine($"No valid SVG data found in file {svgFile}");
                }
            }

            GenerateCode(outputPath, iconsData);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var provider = new JetBrainsIconDataProvider();
            string currentDirectory = Directory.GetCurrentDirectory();
            string projectDirectory = Path.Combine(currentDirectory, "..", "..", "..");
            projectDirectory = Path.GetFullPath(projectDirectory);
            string iconsDirectory = Path.Combine(projectDirectory, "Icons");
            string outputDirectory = Path.Combine(projectDirectory, "Generate");

            // Ensure the output directory exists
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }

            string outputPath = Path.Combine(outputDirectory, "JetBrainsIconDataProviderPart.cs");

            if (Directory.Exists(iconsDirectory))
            {
                provider.ProcessSvgFiles(iconsDirectory, outputPath);
            }
            else
            {
                Console.WriteLine("Directory not found: " + iconsDirectory);
            }
        }
    }
}
